// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerifiedAt DateTime?
  passwordHash    String
  displayName     String
  avatarUrl       String?
  locale          String   @default("en")
  theme           String   @default("light")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  resetToken      String?
  resetTokenExp   DateTime?

  // Relations
  prayers    FavoritePrayer[]
  saints     FavoriteSaint[]
  journal    JournalEntry[]
  milestones Milestone[]
  goals      Goal[]
}

model FavoritePrayer {
  id        String   @id @default(cuid())
  userId    String
  prayerId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  prayer Prayer @relation(fields: [prayerId], references: [id])
}

model Prayer {
  id          String   @id @default(cuid())
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  audioUrl    String?
  sourceAttr  String?

  locales PrayerLocale[]
}

model PrayerLocale {
  id      String @id @default(cuid())
  prayerId String
  locale  String
  title   String
  bodyHtml String

  prayer Prayer @relation(fields: [prayerId], references: [id])
}

model FavoriteSaint {
  id        String   @id @default(cuid())
  userId    String
  saintId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id])
  saint Saint @relation(fields: [saintId], references: [id])
}

model Saint {
  id        String   @id @default(cuid())
  slug      String   @unique
  feastDate DateTime?
  canonizationStatus String?
  patronagesJson     String?

  locales SaintLocale[]
}

model SaintLocale {
  id      String @id @default(cuid())
  saintId String
  locale  String
  name    String
  biographyHtml String

  saint Saint @relation(fields: [saintId], references: [id])
}

model JournalEntry {
  id        String   @id @default(cuid())
  userId    String
  title     String
  bodyMarkdown String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Milestone {
  id          String   @id @default(cuid())
  userId      String
  type        String   // sacrament | spiritual | personal
  title       String
  description String?
  iconKey     String?
  status      String   // planned | in_progress | completed
  completedAt DateTime?

  user User @relation(fields: [userId], references: [id])
}

model Goal {
  id          String   @id @default(cuid())
  userId      String
  title       String
  description String?
  type        String   // generic | template
  templateId  String?
  createdAt   DateTime @default(now())

  days GoalDay[]
  user User @relation(fields: [userId], references: [id])
}

model GoalDay {
  id         String   @id @default(cuid())
  goalId     String
  dayNumber  Int
  checklistJson String
  isCompleted Boolean @default(false)
  completedAt DateTime?

  goal Goal @relation(fields: [goalId], references: [id])
}
