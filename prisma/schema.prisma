// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/* =========================
   Enums
   ========================= */

enum MilestoneType {
  SACRAMENT
  SPIRITUAL
  PERSONAL
}

enum MilestoneStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
}

enum GoalType {
  GENERIC
  TEMPLATE
}

enum GoalStatus {
  IN_PROGRESS
  COMPLETED
  OVERDUE
  CANCELED
}

/* =========================
   Core models
   ========================= */

model User {
  id              String   @id @default(cuid())
  email           String   @unique
  emailVerifiedAt DateTime?
  passwordHash    String
  displayName     String
  avatarUrl       String?
  locale          String   @default("en")
  theme           String   @default("light")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  resetToken      String?
  resetTokenExp   DateTime?

  prayers       FavoritePrayer[]
  saints        FavoriteSaint[]
  ourLadies     FavoriteOurLady[]
  favorites     Favorite[]
  journal       JournalEntry[]
  milestones    Milestone[]
  goals         Goal[]
}

/* =========================
   Prayers
   ========================= */

model PrayerCategory {
  id        String                 @id @default(cuid())
  slug      String                 @unique
  createdAt DateTime               @default(now())
  updatedAt DateTime               @updatedAt

  locales   PrayerCategoryLocale[]
  prayers   Prayer[]

  @@index([slug])
}

model PrayerCategoryLocale {
  id         String         @id @default(cuid())
  categoryId String
  locale     String
  name       String

  category PrayerCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([categoryId, locale])
}

model Prayer {
  id          String   @id @default(cuid())
  slug        String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  categoryId  String
  audioUrl    String?
  sourceAttr  String?

  category PrayerCategory @relation(fields: [categoryId], references: [id], onDelete: Restrict)
  locales  PrayerLocale[]
  favedBy  FavoritePrayer[]

  @@index([slug])
}

model PrayerLocale {
  id       String @id @default(cuid())
  prayerId String
  locale   String
  title    String
  bodyHtml String

  prayer Prayer @relation(fields: [prayerId], references: [id], onDelete: Cascade)

  @@unique([prayerId, locale])
}

model FavoritePrayer {
  id        String   @id @default(cuid())
  userId    String
  prayerId  String
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  prayer Prayer @relation(fields: [prayerId], references: [id], onDelete: Cascade)

  @@unique([userId, prayerId]) // prevent duplicates
  @@index([userId])
}

/* =========================
   Saints
   ========================= */

model Saint {
  id                 String   @id @default(cuid())
  slug               String   @unique
  feastDate          DateTime?
  canonizationStatus String?
  patronagesJson     Json?

  locales   SaintLocale[]
  favedBy   FavoriteSaint[]

  @@index([slug])
}

model SaintLocale {
  id            String @id @default(cuid())
  saintId       String
  locale        String
  name          String
  biographyHtml String

  saint Saint @relation(fields: [saintId], references: [id], onDelete: Cascade)

  @@unique([saintId, locale])
}

model FavoriteSaint {
  id        String   @id @default(cuid())
  userId    String
  saintId   String
  createdAt DateTime @default(now())

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  saint Saint @relation(fields: [saintId], references: [id], onDelete: Cascade)

  @@unique([userId, saintId]) // prevent duplicates
  @@index([userId])
}

/* =========================
   Our Lady apparitions
   ========================= */

model OurLady {
  id             String   @id @default(cuid())
  slug           String   @unique
  feastDate      DateTime?
  location       String?
  title          String?
  apparitionsJson Json?
  sourceAttr     String?

  locales OurLadyLocale[]
  favedBy FavoriteOurLady[]

  @@index([slug])
}

model OurLadyLocale {
  id         String @id @default(cuid())
  ourLadyId  String
  locale     String
  name       String
  biographyHtml String

  ourLady OurLady @relation(fields: [ourLadyId], references: [id], onDelete: Cascade)

  @@unique([ourLadyId, locale])
}

model FavoriteOurLady {
  id        String   @id @default(cuid())
  userId    String
  ourLadyId String
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  ourLady OurLady @relation(fields: [ourLadyId], references: [id], onDelete: Cascade)

  @@unique([userId, ourLadyId]) // prevent duplicates
  @@index([userId])
}

/* =========================
   Journal
   ========================= */

model JournalEntry {
  id            String   @id @default(cuid())
  userId        String
  title         String
  bodyMarkdown  String
  isSaved       Boolean  @default(true)
  isFavorite    Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

/* =========================
   Milestones and Goals
   ========================= */

model Milestone {
  id          String          @id @default(cuid())
  userId      String
  type        MilestoneType
  title       String
  description String?
  iconKey     String?
  status      MilestoneStatus
  completedAt DateTime?
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // prevent duplicate sacraments and consecrations for a user by title and type
  @@unique([userId, type, title])
  @@index([userId, type, status])
}

model Goal {
  id          String      @id @default(cuid())
  userId      String
  title       String
  description String?
  type        GoalType    @default(GENERIC)
  templateId  String?
  status      GoalStatus  @default(IN_PROGRESS)
  dueDate     DateTime?
  completedAt DateTime?
  createdAt   DateTime    @default(now())

  days GoalDay[]
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([dueDate])
}

model GoalDay {
  id            String   @id @default(cuid())
  goalId        String
  dayNumber     Int
  checklistJson Json
  isCompleted   Boolean  @default(false)
  completedAt   DateTime?

  goal Goal @relation(fields: [goalId], references: [id], onDelete: Cascade)

  @@unique([goalId, dayNumber])
  @@index([goalId])
}

/* =========================
   Unified favorites
   ========================= */

model Favorite {
  id         String   @id @default(cuid())
  userId     String
  entityType String   // prayer, saint, guide, parish, ourlady
  entityId   String
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, entityType, entityId]) // prevent duplicates
  @@index([userId, entityType])
}
